services:
  # -----------------------------
  # PostgreSQL Cluster
  # -----------------------------
  db_writer:
    image: bitnami/postgresql:15
    environment:
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: postgres
      POSTGRESQL_DATABASE: app_db
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: repl_user
      POSTGRESQL_REPLICATION_PASSWORD: repl_pass
    volumes:
      - pgdata_writer:/bitnami/postgresql
    networks:
      - cluster_net

  db_reader:
    image: bitnami/postgresql:15
    depends_on:
      - db_writer
    environment:
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: postgres
      POSTGRESQL_DATABASE: app_db
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_MASTER_HOST: db_writer
      POSTGRESQL_REPLICATION_USER: repl_user
      POSTGRESQL_REPLICATION_PASSWORD: repl_pass
    volumes:
      - pgdata_reader:/bitnami/postgresql
    networks:
      - cluster_net

  # -----------------------------
  # Redis
  # -----------------------------
  redis:
    image: redis:7
    networks:
      - cluster_net

  # -----------------------------
  # Backend + PgBouncer Sidecars
  # -----------------------------
  backend:
    build: ./backend
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - pgbouncer_backend_writer
      - pgbouncer_backend_reader
      - redis
    ports:
      - "8000:8000"
    networks:
      - cluster_net
      - ingress_net
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  pgbouncer_backend_writer:
    image: edoburu/pgbouncer
    depends_on:
      - db_writer
    volumes:
      - ./backend/pgbouncer_writer:/etc/pgbouncer
    networks:
      - cluster_net
      - ingress_net
    command: ["pgbouncer", "/etc/pgbouncer/pgbouncer.ini"]

  pgbouncer_backend_reader:
    image: edoburu/pgbouncer
    depends_on:
      - db_reader
    volumes:
      - ./backend/pgbouncer_reader:/etc/pgbouncer
    networks:
      - cluster_net
      - ingress_net
    command: ["pgbouncer", "/etc/pgbouncer/pgbouncer.ini"]

  # -----------------------------
  # Celery Worker + Beat + PgBouncer Sidecars
  # -----------------------------
  celery_worker:
    build: ./backend
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - pgbouncer_celery_writer
      - pgbouncer_celery_reader
      - redis
    command: celery -A app.celery_app worker --loglevel=info
    networks:
      - cluster_net

  celery_beat:
    build: ./backend
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - pgbouncer_celery_writer
      - pgbouncer_celery_reader
      - redis
    command: celery -A app.celery_app beat --loglevel=info
    networks:
      - cluster_net

  pgbouncer_celery_writer:
    image: edoburu/pgbouncer
    depends_on:
      - db_writer
    volumes:
      - ./backend/pgbouncer_writer:/etc/pgbouncer
    networks:
      - cluster_net
    command: ["pgbouncer", "/etc/pgbouncer/pgbouncer.ini"]

  pgbouncer_celery_reader:
    image: edoburu/pgbouncer
    depends_on:
      - db_reader
    volumes:
      - ./backend/pgbouncer_reader:/etc/pgbouncer
    networks:
      - cluster_net
    command: ["pgbouncer", "/etc/pgbouncer/pgbouncer.ini"]

  # -----------------------------
  # Flower (Celery Monitoring)
  # -----------------------------
  flower:
    image: mher/flower
    environment:
      - CELERY_BROKER=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - cluster_net
      - ingress_net

  # -----------------------------
  # Frontend / Next.js
  # -----------------------------
  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env
    command: sh -c "npm install --legacy-peer-deps && npm run dev"
    depends_on:
      - backend
    networks:
      - cluster_net
      - ingress_net

  storybook:
    build:
      context: ./frontend
      target: storybook
    container_name: storybook
    ports:
      - "6006:6006"
    volumes:
      - ./frontend:/app
    command: npm run storybook
    networks:
      - ingress_net

  # -----------------------------
  # S3 Storage (MinIO)
  # -----------------------------
  s3_storage:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      cluster_net:
        aliases:
          - minio.local
      ingress_net:
        aliases:
          - minio.local

  # -----------------------------
  # Email (MailHog)
  # -----------------------------
  email_service:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - cluster_net
      - ingress_net

volumes:
  pgdata_writer:
  pgdata_reader:
  minio_data:

networks:
  cluster_net:
    driver: bridge
  ingress_net:
    driver: bridge
